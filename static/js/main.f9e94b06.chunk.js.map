{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Navbar.jsx","components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","className","onClick","this","props","changeColor","Component","TableRow","tableCols","i","colsNum","push","toString","NavBar","addrow","addcol","removeRow","removeCol","clearAll","fillAll","fillUncolored","onChange","setColor","value","Table","state","rows","cols","color","bind","setState","event","target","style","backgroundColor","document","querySelectorAll","forEach","e","tableRows","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9e94b06.chunk.js","sourcesContent":["import { Component } from \"react\"\n\n\nclass TableCell extends Component{\n    render(){\n        return <td className=\"cell\" onClick={this.props.changeColor}\n                                    >\n\n        </td>;\n    }\n}\n\nexport default TableCell;","import {Component} from 'react';\nimport TableCell from './TableCell';\n\nclass TableRow extends Component{\n\n    render(){\n        let tableCols = [];\n        for(let i = 0; i <= this.props.colsNum; i++){\n            tableCols.push(<TableCell key = {i.toString()+\"c\"}\n                            changeColor={this.props.changeColor}\n                            />);\n        }\n        return <tr>{tableCols}</tr>;\n    }\n}\n\nexport default TableRow;","import {Component} from 'react';\n\nclass NavBar extends Component {\n    \n    render(){\n        return <div>\n            <div className=\"buttons\">\n                <button onClick={this.props.addrow} className=\"btn-success btn-lg\">add row</button>\n                <button onClick={this.props.addcol} className=\"btn-success btn-lg\">add col</button>\n                <button onClick={this.props.removeRow} className=\"btn-success btn-lg\">remove row</button>\n                <button onClick={this.props.removeCol} className=\"btn-success btn-lg\">remove col</button>\n                <button onClick={this.props.clearAll} className=\"btn-success btn-lg\">clear all</button>\n                <button onClick={this.props.fillAll} className=\"btn-success btn-lg\">fill all</button>\n                <button onClick={this.props.fillUncolored} className=\"btn-success btn-lg\">fillUncolored</button>\n            </div>\n            <div className=\"select-container\"> \n                <select onChange={this.props.setColor}>\n                    <option value=\"#FF0000\">Red</option>\n                    <option value=\"#00FF00\">Green</option>\n                    <option value=\"#0000FF\">Blue</option>\n                </select>\n            </div>\n            \n            \n        </div>\n    }\n}\n\nexport default NavBar;","import {Component} from 'react';\nimport TableRow from './TableRow';\nimport NavBar from './Navbar';\n\nclass Table extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            rows: 0,\n            cols: 0,\n            color: '#FFFFFF'\n        }\n        this.addrow = this.addrow.bind(this);\n        this.addcol = this.addcol.bind(this);\n        this.removeRow = this.removeRow.bind(this);\n        this.removeCol = this.removeCol.bind(this);\n        this.setColor = this.setColor.bind(this);\n        this.changeColor = this.changeColor.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n        this.fillAll = this.fillAll.bind(this);\n        this.fillUncolored = this.fillUncolored.bind(this);\n    }\n    \n    addrow(){\n        this.setState({\n            rows: this.state.rows + 1\n        })\n    }\n    addcol(){\n        this.setState({\n            cols: this.state.cols + 1\n        })\n    }\n    removeRow(){\n        if(this.state.rows > 0){\n            this.setState({\n                rows: this.state.rows -1\n            })\n        }else{\n            this.setState({\n                cols: 0\n            });\n        }\n    }\n    removeCol(){\n        if(this.state.cols > 0){\n            this.setState({\n                cols: this.state.cols - 1\n            })\n        }else{\n            this.setState({\n                rows: 0\n            });\n        }\n    }\n    setColor(event){\n        this.setState({\n            color: event.target.value\n        })\n    }\n    changeColor(event){\n        event.target.style.backgroundColor = this.state.color;\n    }\n\n    clearAll(){\n        document.querySelectorAll(\"td\").forEach( e => {  \n            e.style.backgroundColor = '';\n        })\n    }\n    fillAll(){\n        document.querySelectorAll(\"td\").forEach(e => {\n            e.style.backgroundColor = this.state.color;\n        })\n    }\n    fillUncolored(){\n        document.querySelectorAll(\"td\").forEach(e => {\n            if(e.style.backgroundColor === ''){\n                e.style.backgroundColor = this.state.color;\n            }\n        })\n    }\n\n    render(){ \n        let tableRows = [];\n        for(let i = 0; i <= this.state.rows; i++){\n            tableRows.push(<TableRow key={i.toString()+\"r\"} \n                colsNum={this.state.cols}\n                changeColor={this.changeColor}\n                />)\n        }\n        return<div className=\"container\">\n            <NavBar addrow= {this.addrow}\n                    addcol= {this.addcol}\n                    removeRow= {this.removeRow}\n                    removeCol= {this.removeCol}\n                    setColor = {this.setColor}\n                    clearAll = {this.clearAll}\n                    fillAll = {this.fillAll}\n                    fillUncolored = {this.fillUncolored}\n                 />\n                 <br></br>\n            <table>\n                <tbody>\n                    {tableRows}\n                </tbody>\n            </table>\n        </div> \n        \n    }\n}\n\nexport default Table;","\nimport \"./App.css\";\nimport Table from \"./components/Table\";\n\n  function App(){\n    return <div>\n        <Table />\n      </div>\n    ;\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}